write(int fd, const void *buf, size_t count):	Scrive fino a count byte da buf nel file/   socket identificato da fd. Restituisce il numero di byte scritti.ðŸ‘Œ

close(int fd):	Chiude il file descriptor fd. Usato per chiudere socket.ðŸ‘Œ

select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout):	Attende che uno o piÃ¹ file descriptor diventino pronti per I/O. Fondamentale per gestire piÃ¹ client contemporaneamente.

socket(int domain, int type, int protocol):	Crea un socket. Tipicamente: socket(AF_INET, SOCK_STREAM, 0).

accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen):	Accetta una nuova connessione sul socket sockfd. Restituisce un nuovo socket per comunicare col client.

listen(int sockfd, int backlog):	Mette il socket in modalitÃ  ascolto. backlog Ã¨ la lunghezza della coda delle connessioni pendenti.

send(int sockfd, const void *buf, size_t len, int flags):	Invia dati su un socket. Simile a write(), ma con flag per controlli extra.

recv(int sockfd, void *buf, size_t len, int flags):	Riceve dati da un socket. Simile a read(). Restituisce il numero di byte letti.

bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen):	Associa un socket a un indirizzo IP e una porta. Necessario prima di 
listen().

strstr(const char *haystack, const char *needle):	Cerca la sottostringa needle dentro haystack. Restituisce un puntatore alla prima occorrenza. Utile per identificare comandi o delimitatori.

strlen(const char *s):	Restituisce la lunghezza della stringa s (escludendo \0).ðŸ‘Œ

strcpy(char *dest, const char *src):	Copia la stringa src in dest. Attenzione: dest deve avere spazio sufficiente.ðŸ‘Œ

strcat(char *dest, const char *src):	Concatena la stringa src alla fine di dest. Attenzione alla gestione della memoria.ðŸ‘Œ

malloc(size_t size):	Alloca size byte di memoria non inizializzata.ðŸ‘Œ

calloc(size_t nmemb, size_t size):	Alloca memoria per un array di nmemb elementi e li inizializza a zero.ðŸ‘Œ

realloc(void *ptr, size_t size):	Cambia la dimensione del blocco di memoria puntato da ptr a size. PuÃ² spostare il blocco in unâ€™altra posizione.ðŸ‘Œ

free(void *ptr):	Libera la memoria allocata precedentemente con malloc, calloc o realloc.ðŸ‘Œ

bzero(void *s, size_t n):	Imposta i primi n byte dellâ€™area di memoria puntata da s a zero. (Equivalente a memset(s, 0, n))ðŸ‘Œ

memset(void *s, int c, size_t n):	Imposta i primi n byte di s al valore c. Utile per azzerare strutture.ðŸ‘Œ

atoi(const char *nptr):	Converte una stringa in intero (int). Utile per ottenere la porta da argv[1].ðŸ‘Œ

sprintf(char *str, const char *format, ...):	Scrive una stringa formattata in str (come printf, ma scrive in una stringa). Attenzione: puÃ² causare overflow se non gestita bene.ðŸ‘Œ

exit(int status):	Termina il programma con codice di uscita status. Tipicamente si usa exit(1) per errore, exit(0) per successo.ðŸ‘Œ